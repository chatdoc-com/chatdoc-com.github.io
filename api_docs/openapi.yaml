openapi: 3.0.2
info:
  title: ChatDOC API
  description: |2
    # Introduction

    ChatDOC helps you chat with documents, and get instant answers with cited sources. The reference is your key to a comprehensive understanding of the ChatDOC API.

    Developers can use the API to access ChatDOC's documents and questions, and build interactive experiences for users outside ChatDOC. Below you'll find details for objects and endpoints used in the API.


    > You need an API key to interact with the ChatDOC API. You can create keys after you buy the API package or membership plan.

    ## Conventions

    The base URL to send all API requests is https://chatdoc.com/api. HTTPS is required for all API requests.

    The ChatDOC API follows RESTful conventions when possible, with most operations performed via GET, POST, PUT, and DELETE requests. Request and response bodies are encoded as JSON.

    We follow HTTP standards for status codes. For example, a successful request returns a 200 OK response code, and a failed request returns a 4xx or 5xx error code.

    ## JSON conventions

    * Response body of success requests is generally as follows:

        ```json
        {
          "status": "ok",
          "data": {
            "id": 160,
            "name": "Bo",
            ...
          }
        }
        ```

        * `status` and `data` are common properties.
        * Object properties are contained directly in `data`, there is no extra model objects. (e.g. "document", "user", etc.)
    * Property names are in snake_case (not camelCase or kebab-case).
    * Time is stored as [Unix timestamps](https://www.unixtimestamp.com/) in seconds, and this point in time technically does not change no matter where you are located on the globe. You can convert it to datetime of your local timezone.
    * Optional properties are nullable, you can just ignore it sometimes.

    ## Request limits

    To ensure a consistent developer experience for all API users, the ChatDOC API is rate limited.

    ## Authentication

    Requests use the HTTP `Authorization` header to both authenticate and authorize operations. The ChatDOC API accepts bearer tokens in this header. Bearer keys can be managed in our web site.

    ```curl
    curl 'https://chatdoc.com/api/v1/external/documents/upload'   -H 'Authorization: Bearer '"$API_KEY"''
    ```

    Different keys of the same user are interoperable of each others' resource, they share common permission of the user.

    ## Objects

    ### Document

    You can first upload documents to get started. Supported document formats including pdf, docx/doc, and more formats such as markdown, epub are upcoming.

    ### Collection

    Collection is just a special type of `document`, they have common properties like `name`, `status` etc. The difference is that as for questioning, a document can be standalone or grouped as a `collection`, each file collection is a customized database, and you can acquire knowledge effortlessly through conversation.

    ### Question

    Namely chat, there can be [4 Ways to Make Queries](https://chatdoc.notion.site/4-Ways-to-Make-Queries-3d8d6d36060b4c7eb1d69e6a32405dd7):

    * **Try our Suggested Queries**
    * **Ask About Full Text**
    * **Ask About Selected Text**
    * **Query across multi docs**

    # Getting started
    1. Deploy `js-sdk-app` to the server, you can get the application code from the url
      
       >  `js-sdk-app` is based on the @paodingai/pdflux-pdf-viewer
   
    2. Install @paodingai/pdf-document-viewer-js-sdk

       `@paodingai/pdf-document-viewer-js-sdk` created a iframe and link the `js-sdk-app` 
       ```bash
       pnpm install @paodingai/pdf-document-viewer-js-sdk
       # npm install @paodingai/pdf-document-viewer-js-sdk
       # npm install @paodingai/pdf-document-viewer-js-sdk
       ```
    3. Init PdfViewerSdk

        Example 

        ```js
        import { initSDK, EVENT_TYPES } from '@paodingai/pdf-document-viewer-js-sdk';

        const sdkInstance = initSDK({
          mount: here input the dom you will mount the sdk,
          url: here input the sdk app url from setp 1,
          fileUrl: here input the pdf url 
        })

        // this event is dispatched after the document per page rendered
        // you can set elements in the event
        sdkInstance.on(EVENT_TYPES.PAGE_RENDERED, async (pageNumber) => {
          // 1. get element blocks from api
          // 2. set elements to sdk
          const elements = await getElementBlocks(docId, [pageNumber - 1]);
          sdkInstance.setElementBlocks(pageNumber, elements, true)
        });

        // this event is dispatched after you clicked the chat icon in document
        sdkInstance.on(EVENT_TYPES.CHAT_ICON_CLICKED, (data) => {
          // data is the selected text info from document
          console.log(data)
        });

        ``` 
    # PdfViewerSdk

    Represents a PDF Viewer SDK.

    ## Constructor

    ### PdfViewerSdk(config: SdkConfigParams)

    Creates an instance of PdfViewerSdk.

    - **config**: `SdkConfigParams` - The configuration parameters for the SDK.

    ## Properties

    ### iframe: HTMLIFrameElement

    Gets the iframe element.

    - Returns: `HTMLIFrameElement` - The iframe element.

    ### mountEle: Element | null

    Gets the mount element for rendering the PDF viewer.

    - Returns: `Element | null` - The mount element.

    ## Methods

    ### ready(): Promise<void>

    Waits for the app connection to be ready.

    - Returns: `Promise<void>` - A promise that resolves when the app connection is ready.

    ### destroy(): void

    Destroys the PDF viewer SDK instance.

    ### on(name: string, handler: Func): void

    Adds an event listener for the specified event.

    - **name**: `string` - The name of the event.
    - **handler**: `Func` - The event handler function.

    ### off(name: string, handler: Func): void

    Removes an event listener for the specified event.

    - **name**: `string` - The name of the event.
    - **handler**: `Func` - The event handler function.

    ### emit(name: string, data?: any): void

    Emits an event with optional data.

    - **name**: `string` - The name of the event.
    - **data**: `any` (optional) - The data to pass along with the event.

    ### getCurrentPageNumber(): any

    Gets the current page number.

    - Returns: `any` - The current page number.

    ### setFileUrl(fileUrl: string): any

    Sets the file URL.

    - **fileUrl**: `string` - The URL of the file to load.

    ### setElements(page: number, elements: any[], isRender = true): void

    Sets the element blocks for a specific page.

    - **page**: `number` - The page number.
    - **elements**: `any[]` - The element blocks.
    - **isRender**: `boolean` (optional) - Indicates whether to render the blocks to pdf. Default is `true`.

    ### drawSources(sources: Source[]): Promise<void>

    Draws source rectangles on the PDF viewer.

    - **sources**: `Source[]` - The source rectangles to draw.

    ### clearSourceAnnotations(): void

    Clears source annotations.

    ## Interface

    ### SdkConfigParams

    The configuration parameters for the SDK.

    - **mount**: `string | HTMLElement` - The mount element for rendering the PDF viewer.
    - **url**: `string` - The URL of the page.
    - **fileUrl**: `string` (optional) - The URL of the PDF file.

     Example 
    ```javascript
     const config: SdkConfigParams = {
      mount: '#pdf-viewer',
      url: 'https://example.com/pdf-viewer',
      fileUrl: 'https://example.com/pdf-file.pdf',
    };
    ```
    ### Source
    Type representing a source in the PDF Viewer.

    - **pageNumber**: `number` - The page number of the source.

    - **rects**: `number[][]` -  An array of rectangles representing the coordinates of the source.

    Example
    ```
     const source: Source = {
       pageNumber: 1,
       rects: [[10, 10, 50, 50], [60, 60, 100, 100]],
     };

    ```

    

  version: 0.1.0
servers:
  - url: /api/v1/external
paths:
  /documents/upload:
    post:
      tags:
        - Documents
      summary: Upload Document
      description: |-
        Upload a document

        **Params**:

        `collection_id`: if provided, add document to the collection, collection can be created by `POST /documents/collections`

        **Response**:

        * `id`: document id, also called `upload_id`, you can use it to get the document by `GET /documents/{upload_id}`. It's of uuid format.

        **Attention**: you should store `id` in your database, because we don't have a `GET /documents/list` API to list all documents for now.

        * `status`: Once uploaded, the status is `UN_PARSED`, after a series of processing, the
        status would change by time, and finally to be one of the following two cases:

        ```
        UN_PARSED = 1              file uploaded or collection has no document
        ELEMENT_PARSED = 300       analysis of the document has succeeded
        ERROR_STATUSES (< 0)       error occurred during analysis
        ```

        So before the document status finalized, you can poll the status by
        `GET /documents/{upload_id}` at interval of 10s , generally it takes 1-2 minutes to
        finish depending on content length of the document. If error occurred, it doesn't occupy your quota.

        For reference, other statuses are as follows:

        ```
        UN_PARSED = 1              file uploaded or collection has no document
        LINK_UN_PARSED = 10        file link submitted
        PARSING = 12               parsing, mainly used for collection
        LINK_DOWNLOADING = 15      file link downloading
        PDF_CONVERTING = 20        docx to pdf converting
        PDF_CONVERTED = 30         docx to pdf success
        TEXT_PARSING = 40          text embedding（when element parse timeout 2min）
        ELEMENT_PARSING = 50       element embedding
        INSIGHT_CALLBACK = 70      element parse success
        TEXT_PARSED = 210          text embedding success
        ELEMENT_PARSED = 300       element embedding success
        TEXT_PARSE_ERROR = -1      text embedding failed
        ELEMENT_PARED_ERROR = -2   element embedding failed
        PDF_CONVERT_ERROR = -3     docx to pdf failed
        LINK_DOWNLOAD_ERROR = -4   file link download failed
        EXCEED_SIZE_ERROR = -5     file size exceed limit
        PAGE_LIMIT_ERROR = -10     page limit error
        TITLE_COMPLETE_ERROR = -11 complete title failed
        ```
      operationId: upload_document_documents_upload_post
      parameters:
        - required: false
          schema:
            title: Collection Id
            type: string
          name: collection_id
          in: query
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_upload_document_documents_upload_post'
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIUploadResp'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
        - HTTPBearer: []
        - HTTPBearer: []
  /documents/{upload_id}:
    get:
      tags:
        - Documents
      summary: Get Document
      description: |-
        Get a document

        **Response**:

        Similar with `POST /documents/upload`, and pay attention to the following fields:

        * `type`:
            * collection: document collection
            * single_doc: standalone document
            * doc_of_collection: sub document of collection

        * `documents`: sub document list of collection, which only returns for collection
      operationId: get_document_documents__upload_id__get
      parameters:
        - required: true
          schema:
            title: Upload Id
            type: string
          name: upload_id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APICollectionOrUploadResp'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
        - HTTPBearer: []
    delete:
      tags:
        - Documents
      summary: Delete Document
      description: Delete a document
      operationId: delete_document_documents__upload_id__delete
      parameters:
        - required: true
          schema:
            title: Upload Id
            type: string
          name: upload_id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
        - HTTPBearer: []
  /documents/collection:
    post:
      tags:
        - Documents
      summary: Create Collection
      description: |-
        Create an empty collection

        **Response**:

        Similar with `POST /documents/upload`, `id` also called `upload_id`, which can be used for document related APIs:

        * `GET /documents/{upload_id}`
        * `DELETE /documents/{upload_id}`
        * `POST /documents/{upload_id}/chat`

        Upon created you can add sub documents to the collection by `POST /documents/upload?collection_id={upload_id}`.
      operationId: create_collection_documents_collection_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionReq'
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIUploadResp'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
        - HTTPBearer: []
  /documents/{upload_id}/chat:
    post:
      tags:
        - Documents
      summary: Chat Stream
      description: |-
        Chat with the document, response in [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events) mode, which is also called `streaming` mode.

        **Params**:

        * `question`: question to ask

        * `selected_meta`: When use **Ask About Selected Text**, this field is acquired from [EVENT_TYPES.CHAT_ICON_CLICKED](/api_docs/#section/Getting-started) of our PdfViewerSdk.

        * `history`: chat history, used for [Threaded Chat](https://chatdoc.notion.site/2-Ways-to-Dive-Deeper-1f2e3a8705e744a6872da0d39254f182)
            * this parameter simulates [OpenAI' API](https://platform.openai.com/docs/guides/gpt/chat-completions-api)
            * history is question and answer pairs, which is a list of `ChatMessage` objects, sample parameters are as follows:

            ```json
            [
                {"role": "user", "content": "Who won the world series in 2020?"},
                {"role": "assistant", "content": "The Los Angeles Dodgers won the World Series in 2020."},
                {"role": "user", "content": "Where was it played?"}
                {"role": "assistant", "content": "The 2020 World Series was played at Globe Life Field in Arlington, Texas."},
            ]
            ```

        * `search_entire_doc`:
            * if true: limit responses to current file' information
            * else: responses go freely with knowledge of our AI

        * `detailed_citation`: Whether to show the source at the end of each sentence or not. Requires enabling the `search_entire_doc` setting.

        * `language`: preferred language of answer to the question, if not provided, we will try to detect the language automatically. But we can't promise, when AI can't answer your question well, it generally answers in English. It's strongly recommended to not pass this parameter, which is more flexible and works well.

        **Response**:

        structure is as follows:

        ```json
        {
            "data": {
                "answer": data,
                "id": question_id,
                "source_info": source_info
            }
        }
        ```

        * `answer`: chunks of answer, may be Markdown format to support rich text, for example: [Tables](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#tables), [Links](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#links).
            * If the answer is empty, it means error occurred.

        * `id`: id of the question, you can use it to `GET /questions/{question_id}` later.

        **Attention**: you should store `id` in your database, because we don't have a `GET /questions/list` API to list all questions for now.

        * `source_info`: only responses in the last chunk, and the structure is as follows:

        ```json
        [
            {
                # key: page number
                # value: rects
                '0': [[38.1063, 557.8058, 553.9003, 584.0043]]
            },
            {'1': [[38.0, 152.3994, 523.6151, 178.6392]]},
            {'0': [[38.0, 758.0623, 537.0082, 784.0]]},
            ...
        ]
        ```

        Page number may not be ordered, you can use this information to highlight the source of the answer in your PDF viewer, by
        calling [`drawSources`](/api_docs/#section/PdfViewerSdk/Methods) method of our PdfViewerSdk, and converting `source_info` to [`Source`](/api_docs/#section/PdfViewerSdk/Interface) parameter.
      operationId: chat_stream_documents__upload_id__chat_post
      parameters:
        - required: true
          schema:
            title: Upload Id
            type: string
          name: upload_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionReq'
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
        - HTTPBearer: []
        - HTTPBearer: []
  /documents/{upload_id}/elements:
    get:
      tags:
        - Documents
      summary: Get Element
      description: |-
        Get elements of a document

        **Params**:

        `page`: page number of the document, starts from 0

        this API is used for our [EVENT_TYPES.PAGE_RENDERED](/api_docs/#section/Getting-started) of our PdfViewerSdk, refer it to get details.
      operationId: get_element_documents__upload_id__elements_get
      parameters:
        - required: true
          schema:
            title: Upload Id
            type: string
          name: upload_id
          in: path
        - required: true
          schema:
            title: Page
            type: array
            items:
              type: integer
          name: page
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response Get Element Documents  Upload Id  Elements Get
                type: array
                items:
                  type: object
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
        - HTTPBearer: []
  /documents/{upload_id}/recommend-questions:
    get:
      tags:
        - Documents
      summary: Recommend
      description: |-
        Recommend questions for a document, defaults to 5 questions.

        Response example:
        ```json
        [
            "What is the name of the author?",
            "What is the name of the book?",
            "When was the book published?",
            "What is the name of the publisher?",
            "Where is the book published?"
        ]
        ```

        Only when analysis of the document has succeeded(status=300), can questions be generated.
      operationId: recommend_documents__upload_id__recommend_questions_get
      parameters:
        - required: true
          schema:
            title: Upload Id
            type: string
          name: upload_id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response Recommend Documents  Upload Id  Recommend Questions Get
                type: array
                items:
                  type: string
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
        - HTTPBearer: []
  /documents/{upload_id}/download:
    get:
      tags:
        - Documents
      summary: Download Document
      description: |-
        Download content of the document with pdf format, support range request.

        * If the document is of doc/docx format, then it's converted to pdf version, and the original version can't be downloaded.
        * If the document is of pdf format, it's recommended to use your local file to avoid unnecessary network traffic.
      operationId: download_document_documents__upload_id__download_get
      parameters:
        - required: true
          schema:
            title: Upload Id
            type: string
          name: upload_id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
        - HTTPBearer: []
  /questions/{question_id}:
    get:
      tags:
        - Question
      summary: Get Question
      description: |-
        Get a question detail

        **Response**:

        * `answer`: full content of answer, including content of Markdown format

        * `type`: question type, refer [4 Ways to Make Queries](https://chatdoc.notion.site/4-Ways-to-Make-Queries-3d8d6d36060b4c7eb1d69e6a32405dd7):
            * doc: Ask About Full Text
            * select: Ask About Selected Text

        * `source_info`: source information of answer, same with `POST /documents/{upload_id}/chat`
      operationId: get_question_questions__question_id__get
      parameters:
        - required: true
          schema:
            title: Question Id
            type: integer
          name: question_id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
        - HTTPBearer: []
components:
  schemas:
    APICollectionOrUploadResp:
      title: APICollectionOrUploadResp
      required:
        - id
        - status
        - name
        - created_at
        - type
      type: object
      properties:
        id:
          title: Id
          type: string
        status:
          $ref: '#/components/schemas/DocumentStatus'
        name:
          title: Name
          type: string
        created_at:
          title: Created At
          type: integer
        type:
          $ref: '#/components/schemas/UploadType'
        documents:
          title: Documents
          type: array
          items:
            $ref: '#/components/schemas/APIUploadResp'
    APIUploadResp:
      title: APIUploadResp
      required:
        - id
        - status
        - name
        - created_at
        - type
      type: object
      properties:
        id:
          title: Id
          type: string
        status:
          $ref: '#/components/schemas/DocumentStatus'
        name:
          title: Name
          type: string
        created_at:
          title: Created At
          type: integer
        type:
          $ref: '#/components/schemas/UploadType'
    Body_upload_document_documents_upload_post:
      title: Body_upload_document_documents_upload_post
      required:
        - file
      type: object
      properties:
        file:
          title: File
          type: string
          format: binary
    ChatMessage:
      title: ChatMessage
      required:
        - role
        - content
      type: object
      properties:
        role:
          $ref: '#/components/schemas/ChatRoleEnum'
        content:
          title: Content
          type: string
    ChatRoleEnum:
      title: ChatRoleEnum
      enum:
        - assistant
        - user
      type: string
      description: An enumeration.
    CollectionReq:
      title: CollectionReq
      required:
        - name
      type: object
      properties:
        name:
          title: Name
          maxLength: 80
          minLength: 1
          type: string
    DocumentStatus:
      title: DocumentStatus
      enum:
        - 1
        - 7
        - 10
        - 12
        - 15
        - 20
        - 25
        - 30
        - 40
        - 50
        - 70
        - 120
        - 210
        - 300
        - 0
        - -1
        - -2
        - -3
        - -4
        - -5
        - -6
        - -10
        - -11
        - -12
        - -13
      type: integer
      description: An enumeration.
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    PDFViewerRect:
      title: PDFViewerRect
      required:
        - pageNumber
        - outline
      type: object
      properties:
        pageNumber:
          title: Pagenumber
          type: integer
        outline:
          title: Outline
          type: array
          items:
            type: integer
    QuestionReq:
      title: QuestionReq
      required:
        - question
      type: object
      properties:
        question:
          title: Question
          maxLength: 3000
          minLength: 1
          type: string
        selected_meta:
          $ref: '#/components/schemas/SelectedMeta'
        history:
          title: History
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
          default: []
        search_entire_doc:
          title: Search Entire Doc
          type: boolean
          default: true
        detailed_citation:
          title: Detailed Citation
          type: boolean
          default: true
        language:
          title: Language
          type: string
    SelectedMeta:
      title: SelectedMeta
      required:
        - material
        - rects
      type: object
      properties:
        material:
          title: Material
          type: string
        rects:
          title: Rects
          type: array
          items:
            $ref: '#/components/schemas/PDFViewerRect'
    UploadType:
      title: UploadType
      enum:
        - collection
        - single_doc
        - doc_of_collection
      type: string
      description: An enumeration.
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
  securitySchemes:
    HTTPBearer:
      type: http
      scheme: bearer
