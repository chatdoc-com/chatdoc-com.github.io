openapi: 3.0.2
info:
  title: ChatDOC API
  description: |2
    # Introduction

    Welcome to ChatDOC API, Version 2!

    ChatDOC is a powerful SaaS AI product that enables you to engage with documents,
    instantly retrieving answers along with cited sources. Our API provides developers
    with the tools to interact with the ChatDOC system, allowing you to create immersive
    experiences for your users.

    This reference serves as a comprehensive guide to the ChatDOC system and
    its Version 2 API. Here, you'll find detailed information on the objects and
    endpoints used in the API. We greatly value your feedback. If you notice any
    missing or inaccurate information, please don't hesitate to open an issue on
    [GitHub](https://github.com/chatdoc-com/chatdoc-com.github.io/issues) or submit a
    pull request to help improve our documentation.


    > To leverage ChatDOC's API capabilities, you'll need an API key. API keys can be
      created by subscribing to an appropriate membership plan or purchasing an API package on
      [ChatDOC.com](https://chatdoc.com/).

    ## Conventions

    All API requests should be directed to the domain `api.chatdoc.com`. and secure HTTPS is mandatory for all interactions.

    Our ChatDOC API adheres to RESTful conventions where applicable, utilizing standard HTTP methods such as GET, POST, PUT, and DELETE. Request and response payloads are encoded in JSON format.

    HTTP status codes are used in accordance with industry standards. Successful requests return a 200 OK response, while failed requests produce 4xx or 5xx error codes.

    Please note that this documentation pertains to ChatDOC API Version 2, which is not backward compatible with Version 1. While Version 1 remains functional, we strongly encourage users to migrate to Version 2 for the best experience.

    If you have any questions or need further assistance, please don't hesitate to reach out to our support team.

    This revised introduction reflects the transition to ChatDOC API Version 2 and highlights its features and benefits.

    ## JSON conventions

    * Response body of success requests is generally as follows:

        ```json
        {
          "status": "ok",
          "data": {
            "id": 160,
            "name": "Bo",
            ...
          }
        }
        ```

        * `status` and `data` are common properties.
        * Object properties are contained directly in `data`, there is no extra model objects. (e.g. "document", "user", etc.)
    * And failed response may be:

        `400 Bad Request`

        ```json
        {
            "detail": "Error message"
        }
        ```

        * `detail` is the error message.
        * `status` is not returned.

        `404 Not Found`

        ```json
        {
            "data": {},
            "detail": "This page has expired, please refresh the page and try again."
        }
        ```

        * `detail` of `404` is unified as above message, no matter which kind of resources you get.

    * Property names are in snake_case (not camelCase or kebab-case).
    * Time is stored as [Unix timestamps](https://www.unixtimestamp.com/) in seconds, and this point in time technically does not change no matter where you are located on the globe. You can convert it to datetime of your local timezone.
    * Optional properties are nullable, you can just ignore it sometimes.

    ## Request limits

    To ensure a consistent developer experience for all API users, the ChatDOC API is rate limited.

    ## Authentication

    Requests use the HTTP `Authorization` header to both authenticate and authorize operations. The ChatDOC API accepts bearer tokens in this header. Bearer keys can be managed in our web site.

    ```curl
    curl 'https://api.chatdoc.com/api/v1/documents/upload'   -H 'Authorization: Bearer "$API_KEY"'
    ```

    Different keys of the same user are interoperable of each others' resource, they share common permission of the user.

    **Please note**: keep your API keys confidential, and do not put them in any client code, including browser html and mobile client, API interactions should be done on the server side.
  
    # Quick Start
    To use the **ChatDOC API**, you have two options:
    - Directly call the [ChatDOC RESTful API](#section/ChatDOC-RESTful-API) from your own service and custom the UI by yourself.
    - Use the `@chatdocai/chatdoc-sdk` to display PDF documents and retrieve data by calling the ChatDOC RESTful API.

      > Before using the API, you need to obtain an API Key on [ChatDOC.com](https://chatdoc.com/).

    You can download [ChatDOC-API-Demo](https://github.com/chatdoc-com/ChatDOC-API-Demo) to start your application.
    ```sh
    git clone https://github.com/chatdoc-com/ChatDOC-API-Demo
    ```

       > The  server folder is an node server, which request the ChatDOC RESTful API.

       > The  client folder is a vue web app, which use `@chatdocai/chatdoc-sdk` to show the document, and request the node server.

    Here are the steps to start the demo:
    1. run `pnpm install`
    2. Set the env variable **API_KEY**.
     > **API_KEY** is the API key that you obtained after purchasing the API package or membership plan.

    3. run `pnpm start`
     > When using a self-signed certificate in your local development environment, you may encounter a browser prompt saying: 'This site can't provide a secure connection'. Please be aware that this is a specific situation in the local development environment and will not affect the use of your genuine SSL certificate when deployed online. For online deployment, you can use your own SSL certificate to ensure a secure connection.

    By following these steps, you will have a simple ChatDOC API application.

    If you only want to know how to use the `@chatdocai/chatdoc-sdk`, you can refer to the [ChatDOC Document Viewer](#section/ChatDOC-Document-Viewer) section.

    Here are some typical use cases of `@chatdocai/chatdoc-sdk` in the demo that you might be interested in:

    1. When you select text on the PDF and click the chat icon, you can obtain the [`MaterialData`](#section/ChatDOC-Document-Viewer/MaterialData) from the callback handler of [EVENT_TYPES.CHAT_ICON_CLICKED](#section/ChatDOC-Document-Viewer/EVENT_TYPES) event. Then, you can post it to the [Ask Question API](#tag/Questions/operation/Ask_Question_questions_post).
    
    2. The response from the [Ask Question API](#tag/Questions/operation/Ask_Question_questions_post) contains the `source_info` field. You can convert the `source_info` to the data type of [Source](#section/ChatDOC-Document-Viewer/Source) and 
     use the [drawSources](#section/ChatDOC-Document-Viewer/Methods) method of `@chatdocai/chatdoc-sdk` to navigate to the page of the sources and highlight them.

    3. By using the [setFileUrl](#section/ChatDOC-Document-Viewer/Methods) method of @chatdocai/chatdoc-sdk, you can switch the displayed PDF file.
    




    # ChatDOC Document Viewer
    If you want to view the document in the browser, you can use the `@chatdocai/chatdoc-sdk` npm package.

    The `@chatdocai/chatdoc-sdk` npm package is used to display PDF files and interact with them by selecting text and asking questions. Here are the steps to get started:

    1. **Install `@chatdocai/chatdoc-sdk`**

       ```bash
       pnpm install @chatdocai/chatdoc-sdk
       # npm install @chatdocai/chatdoc-sdk
       # yarn add @chatdocai/chatdoc-sdk
       ```
    2. **Init chatdoc-sdk**

        Initialize the chatdoc-sdk by importing the **initSDK** function from `@chatdocai/chatdoc-sdk` and using it to create an instance of the [PDFViewerSDK](#section/ChatDOC-Document-Viewer/PDFViewerSDK). 

        Please provide the DOM element or CSS selector string where you want to mount the SDK, as well as the URL of the PDF file. You can find detailed parameter information in the [Config](#section/ChatDOC-Document-Viewer/Config) section.

        Example

        ```js
        import { initSDK } from '@chatdocai/chatdoc-sdk';

        const sdk = initSDK({
          el: '#pdf-viewer',
          fileUrl: 'https://example.com/pdf-file.pdf',
        })

        ```
    3. **Add event listener**

        Add event listeners to handle specific events. For example, you can listen to the **CHAT_ICON_CLICKED** event to get the selected text from the document when the chat icon is clicked.

        The `@chatdocai/chatdoc-sdk` package also exports the EVENT_TYPES object, which types the [event name](#section/ChatDOC-Document-Viewer/EVENT_TYPES).

        Example
        ```js
        import { EVENT_TYPES } from '@chatdocai/chatdoc-sdk';

        // this event is dispatched after you clicked the chat icon in document
        sdk.on(EVENT_TYPES.CHAT_ICON_CLICKED, (data) => {
          // data is the selected text info from document
          console.log(data)
        });

        ```

    ## PDFViewerSDK
    The PDFViewerSDK class provides a PDF viewer SDK with various methods and properties for interacting with the PDF viewer. Here are some key details about the class:


    ## Config

    The configuration parameters for the SDK.

    - **el**: `string | HTMLElement` - the DOM element or CSS selector string used for mounting and rendering the SDK.

    - **fileUrl**: `string` (optional) - The URL of the PDF file.

    - **getToken**: `() => Promise<string>` (optional) - An optional function that returns a Promise resolving to a string representing the [JWT](https://jwt.io/) token.The token is encoded using an API key, and the payload is `{"upload_id": "xxx"}`.
        ```js
        import jwt from 'jsonwebtoken';
        // token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cGxvYWRfaWQiOiI2YjNmYzdlOS1kYzE3LTQwYjYtODI4Ny04MDM5N2JhMWU5MmEifQ.sXUbg6tGtF6KqFtCGALTcm7eG6H23dhrKW1wUAAAyus'
        const token = jwt.sign({ upload_id: '6b3fc7e9-dc17-40b6-8287-80397ba1e92a' }, 'ak-ifypHN4we-v07xhp0pDKRG-znEb-5YQeFuhXgjt4byM', { noTimestamp: true} );
        ```

    Example
    ```javascript

    // node server
    import jwt from 'jsonwebtoken';
    async getDocumentToken(ctx) {
      const { id: uploadId } = ctx.params
      const token = jwt.sign({ upload_id: uploadId }, 'API_KEY', { noTimestamp: true} );
      ctx.body = {
        status: 'ok',
        data: {token}
      }
    }

    // client
    const getToken = async () => {
      const { token } = await getDocumentToken('uploadId');
      return token;
    };
    const config: Config = {
      el: '#pdf-viewer',
      fileUrl: 'https://example.com/pdf-file.pdf',
      getToken
    };
      ```
    ## Source

    The Source type represents a source in the SDK, which is the parameter of the [drawSources](#section/ChatDOC-Document-Viewer/Methods) method.

    - **pageNumber**: `number` - The page number of the source.

    - **rects**: `number[][]` -  An array of rectangles represented by four numbers `[left, top, right, bottom]` indicating their positions within the source coordinates.

    Example
    ```
    const source: Source = {
      pageNumber: 1,
      rects: [[10, 10, 50, 50], [60, 60, 100, 100]],
    };
    ```

    ## MaterialData
    The MaterialData type contains the content of the material and the outlines from the selected text in the PDF File, which are obtained from the callback handler of the [EVENT_TYPES.CHAT_ICON_CLICKED](#section/ChatDOC-Document-Viewer/EVENT_TYPES) event.

    - **material**: `string` - The content of the material.
    - **rects**: [`Rect[]`](#section/ChatDOC-Document-Viewer/Rect) - An array of rectangles representing the outlines.

    Example
    ```
    const material: MaterialData = {
      material: 'content',
      rects: [
        {
          pageNumber: 1,
          outline: [10, 10, 50, 50],
        },
        {
          pageNumber: 2,
          outline: [60, 60, 100, 100],
        },
      ],
    };
    ```
    
    ## Rect
    The Rect type represents a rectangle in the PDF file, and it is a field in the [MaterialData](#section/ChatDOC-Document-Viewer/MaterialData) type.

    - **pageNumber**: `number` - The page number of the rectangle.

    - **outline**: `number[]` - The outline array represents the rectangle's outline coordinates as four values: `left, top, right, and bottom`.

    Example
    ```
    const rect: Rect = {
      pageNumber: 1,
      outline: [10, 10, 50, 50],
    };
    ```
    ## Methods

    ### setFileUrl(fileUrl: string): any

    Sets the file URL.

    - **fileUrl**: `string` - The URL of the file to load.

    ### drawSources(sources: Source[]): Promise<void>

    Draws source rectangles on the PDF viewer.

    - **sources**: [`Source[]`](#section/ChatDOC-Document-Viewer/Source) - The source rectangles to draw.

    ### clearSources(): void

    Clears source annotations.

    ### destroy(): void

    Destroys the PDF viewer SDK instance.

    ### on(name: string, handler: Func): void

    Adds an event listener for the specified event.

    - **name**: `string` - The name of the event, you can get the event name from [EVENT_TYPES](#section/ChatDOC-Document-Viewer/EVENT_TYPES).
    - **handler**: `Func` - The event handler function.

    ### off(name: string, handler: Func): void

    Removes an event listener for the specified event.

    - **name**: `string` - The name of the event.
    - **handler**: `Func` - The event handler function.

    ### getCurrentPageNumber(): any

    Gets the current page number.

    - Returns: `any` - The current page number.

    ## EVENT_TYPES

    - **PAGE_RENDERED** - After each page is rendered, this event is dispatched, and you can obtain the current page number from the callback handler.

    - **CHAT_ICON_CLICKED** - After you clicked the chat icon in document, and you can obtain the [`MaterialData`](#section/ChatDOC-Document-Viewer/MaterialData) from the callback handler.


    # OBJECTS

    ## Document

    You can first upload documents to get started. Supported document formats including pdf, docx/doc, and more formats such as markdown, epub are upcoming.

    ## Collection

    Collection is just a special type of `document`, they have common properties like `name`, `status` etc. The difference is that as for questioning, a document can be standalone or grouped as a `collection`, each file collection is a customized database, and you can acquire knowledge effortlessly through conversation.

    ## Question

    Namely message or chat, there can be [4 Ways to Make Queries](https://chatdoc.notion.site/4-Ways-to-Make-Queries-3d8d6d36060b4c7eb1d69e6a32405dd7):

    * **Try our Suggested Queries**
    * **Ask About Full Text**
    * **Ask About Selected Text**
    * **Query across multi docs**

    # ChatDOC RESTful API
    
    Consuming quota APIs:
    
    ### Document Pages
    
    * POST /documents/upload
    * POST /collections/clone-documents
    
    ### Questions
    
    * POST /questions
    * POST /questions/multi-documents
  version: 0.1.0
servers:
  - url: https://api.chatdoc.com/api/v2
paths:
  /documents/upload:
    post:
      tags:
        - Documents
      summary: Upload Document
      description: |-
        Upload a document

        **Response**:

        * `id`: document id, also called `upload_id`, you can use it to get the document by `GET /documents/{upload_id}`. It's of uuid format.

        **Please note**: you should store `id` in your database, because we don't have a `GET /documents/list` API to list all documents for now.

        * `status`: Once uploaded, the status is `UN_PARSED`, after a series of processing, the
        status would change by time, and finally to be one of the following two cases:

        ```
        UN_PARSED = 1              file uploaded or collection has no document
        # final statuses
        ELEMENT_PARSED = 300       analysis of the document has succeeded
        ERROR_STATUSES (< 0)       error occurred during analysis
        ```

        So before the document status finalized, you can poll the status by
        `GET /documents/{upload_id}` at interval of 10s , generally it takes 1-2 minutes to
        finish depending on content length of the document. If error occurred, it doesn't consume your quota.

        **Please note**:

        * Uploading files consumes your pages quota, and uploading same files again will still consume quota.
        * We'll keep your uploaded file for one year. If you do not make another payment for the API after one year, the file will be permanently deleted.

        For reference, other statuses are as follows:

        ```
        UN_PARSED = 1                      file uploaded or collection has no document
        LINK_UN_PARSED = 10                file link submitted
        PARSING = 12                       parsing, mainly used for collection
        LINK_DOWNLOADING = 15              file link downloading
        PDF_CONVERTING = 20                docx to pdf converting
        PDF_CONVERTED = 30                 docx to pdf success
        TEXT_PARSING = 40                  text embedding（when element parse timeout 2min）
        ELEMENT_PARSING = 50               element embedding
        INSIGHT_CALLBACK = 70              element parse success
        TEXT_PARSED = 210                  text embedding success
        ELEMENT_PARSED = 300               element embedding success
        TEXT_PARSE_ERROR = -1              text embedding failed
        ELEMENT_PARED_ERROR = -2           element embedding failed
        PDF_CONVERT_ERROR = -3             docx to pdf failed
        LINK_DOWNLOAD_ERROR = -4           file link download failed
        EXCEED_SIZE_ERROR = -5             file size exceed limit
        EXCEED_TOKENS_ERROR = -6           exceed tokens limit
        PAGE_PACKAGE_NOT_ENOUGH_ERROR = -9 page package not enough
        PAGE_LIMIT_ERROR = -10             page limit error
        TITLE_COMPLETE_ERROR = -11         complete title failed
        READ_TMP_FILE_ERROR = -12          read tmp file error
        OCR_PAGE_LIMIT_ERROR = -13         ocr page limit error
        ```
      operationId: Upload_Document_documents_upload_post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_Upload_Document_documents_upload_post'
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIUploadResp'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /documents/{upload_id}:
    get:
      tags:
        - Documents
      summary: Get Document
      description: |-
        Get a document

        **Response**:

        Similar with `POST /documents/upload`, and pay attention to the following fields:

        * `type`:
            * collection: document collection
            * single_doc: standalone document
            * doc_of_collection: sub document of collection

        * `documents`: sub document list of collection, which only returns for collection
      operationId: Get_Document_documents__upload_id__get
      parameters:
        - required: true
          schema:
            title: Upload Id
            type: string
          name: upload_id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APICollectionOrUploadResp'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    delete:
      tags:
        - Documents
      summary: Delete Document
      description: Delete a document
      operationId: Delete_Document_documents__upload_id__delete
      parameters:
        - required: true
          schema:
            title: Upload Id
            type: string
          name: upload_id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /documents/{upload_id}/download:
    get:
      tags:
        - Documents
      summary: Download Document
      description: |-
        Download content of the document with pdf format, support CORS and range request.

        * If the document is of doc/docx format, then it's converted to pdf version, and the original version can't be downloaded.
        * If the document is of pdf format, it's recommended to use your local file to avoid unnecessary network traffic.
      operationId: Download_Document_documents__upload_id__download_get
      parameters:
        - required: true
          schema:
            title: Upload Id
            type: string
          name: upload_id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /collections:
    post:
      tags:
        - Collections
      summary: Create Collection
      description: |-
        Create an empty collection

        **Response**:

        Similar with `POST /documents/upload`, response `id` also called `upload_id`, which can be used for document related APIs:

        * `GET /documents/{upload_id}`
        * `DELETE /documents/{upload_id}`
        * `POST /questions?upload_id={upload_id}`

        Upon created you can add sub documents to the collection by:

        * `POST /documents/upload?collection_id={upload_id}`
        * `POST /collections/clone-documents`.
      operationId: Create_Collection_collections_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionReq'
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIUploadResp'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /collections/clone-documents:
    post:
      tags:
        - Collections
      summary: Clone Document To Collection
      description: |-
        Only parsed normal document (status=300) can be cloned to collection, max document count of collection is 30.

        Cloned documents also consume your document page quota.
      operationId: clone_document_to_collection_collections_clone_documents_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APICloneReq'
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /questions/suggested:
    get:
      tags:
        - Questions
      summary: Get Suggested Questions
      description: |-
        Suggested questions for a document, defaults to 5 questions.

        Response example:
        ```json
        [
            "What is the name of the author?",
            "What is the name of the book?",
            "When was the book published?",
            "What is the name of the publisher?",
            "Where is the book published?"
        ]
        ```

        Only when analysis of the document has succeeded(status=300), can questions be generated.
      operationId: Get_Suggested_Questions_questions_suggested_get
      parameters:
        - description: document id or collection id, created by `POST /documents/upload` or `POST /collections` APIs accordingly.
          required: true
          schema:
            title: Upload Id
            maxLength: 36
            minLength: 36
            type: string
            description: document id or collection id, created by `POST /documents/upload` or `POST /collections` APIs accordingly.
          name: upload_id
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response Get Suggested Questions Questions Suggested Get
                type: array
                items:
                  type: string
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /questions:
    post:
      tags:
        - Questions
      summary: Ask Question
      description: |-
        Chat with the document, response in [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events) mode by default, you can change it through `stream` parameter.

        Consume one question quota whether it's upon single document or collection.

        **Response**:

        structure is as follows:

        ```json
        {
            "data": {
                "answer": "answer to the question",
                "id": question_id,
                "source_info": [
                    {
                        # key: page number
                        # value: rects
                        '0': [[38.1063, 557.8058, 553.9003, 584.0043]]
                    },
                    {'1': [[38.0, 152.3994, 523.6151, 178.6392]], 'upload_id': 'xxxx'},
                    {'0': [[38.0, 758.0623, 537.0082, 784.0]], 'upload_id': 'xxxx'},
                    ...
                ]
            }
        }
        ```

        * `answer`: chunks of answer, may be Markdown format to support rich text, for example: [Tables](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#tables). For `detailed_citation` answer, the span tag chunk may be as follows:

            ```
            autobiography captured the pre-Nazi Europe[<span data-index="0">1</span>]
            ```

            The tag attr `data-index` is the index of the source in `source_info` array, which is used to highlight the source of the previous answer sentences in your PDF viewer. The highlighting method is same as `source_info`, and just use slice of `source_info` array as parameter.

        * `id`: id of the question, you can use it to `GET /questions/{question_id}` later.

        **Please note**: you should store `id` in your database, because we don't have a `GET /questions/list` API to list all questions for now.

        * `source_info`: only responses in the last chunk of server-sent events mode, may be an empty list. So if the last chunk doesn't contain `source_info` attr, it means error occurred. Page number may not be ordered, you can use this information to highlight the source of specific `upload_id` document of the answer in your PDF viewer, by
            calling [`drawSources`](/#section/ChatDOC-Document-Viewer/Methods) method of our PDFViewerSDK, and converting `source_info` to [`Source`](/#section/ChatDOC-Document-Viewer/Source) parameter.
      operationId: Ask_Question_questions_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionReq'
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /questions/{question_id}:
    get:
      tags:
        - Questions
      summary: Get Question
      description: |-
        Get a question detail

        **Response**:

        * `answer`: full content of answer, including content of Markdown format

        * `type`: question type, refer [4 Ways to Make Queries](https://chatdoc.notion.site/4-Ways-to-Make-Queries-3d8d6d36060b4c7eb1d69e6a32405dd7):
            * doc: Ask About Full Text
            * select: Ask About Selected Text

        * `source_info`: source information of answer, same with `POST /questions`
      operationId: Get_Question_questions__question_id__get
      parameters:
        - required: true
          schema:
            title: Question Id
            type: integer
          name: question_id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResp'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /questions/multi-documents:
    post:
      tags:
        - Questions
      summary: Ask Question With Multiple Documents
      description: |-
        Chat with multiple documents, similar with `POST /questions`.

        Consume one question quota no matter how many documents you ask upon.

        **Response**:

        Same as `POST /questions`.
      operationId: Ask_Question_with_multiple_documents_questions_multi_documents_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionReqWithUploadIds'
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /users/quota:
    get:
      tags:
        - Users
      summary: Get Quota
      description: |-
        Get quota of not expired package

        Response example:
        ```json
        {
          "data": {
            "package": { # may be null
              "page": { # may be null
                "max_count": 3000,
                "used_count": 1044
              },
              "question": { # may be null
                "max_count": 3000,
                "used_count": 11
              }
            }
          }
        }
        ```
      operationId: get_quota_users_quota_get
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageQuotaResp'
      security:
        - HTTPBearer: []
components:
  schemas:
    APICloneReq:
      title: APICloneReq
      required:
        - collection_id
        - upload_ids
      type: object
      properties:
        collection_id:
          title: Collection Id
          maxLength: 36
          minLength: 36
          type: string
        upload_ids:
          title: Upload Ids
          maxLength: 36
          minLength: 36
          type: array
          items:
            maxLength: 36
            minLength: 36
            type: string
          description: upload id list
    APICollectionOrUploadResp:
      title: APICollectionOrUploadResp
      required:
        - id
        - status
        - name
        - created_at
        - type
      type: object
      properties:
        id:
          title: Id
          type: string
        status:
          $ref: '#/components/schemas/DocumentStatus'
        name:
          title: Name
          type: string
        created_at:
          title: Created At
          type: integer
        type:
          $ref: '#/components/schemas/UploadType'
        documents:
          title: Documents
          type: array
          items:
            $ref: '#/components/schemas/APIUploadResp'
    APIPackageInfoResp:
      title: APIPackageInfoResp
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PackageDataResp'
        question:
          $ref: '#/components/schemas/PackageDataResp'
    APIUploadResp:
      title: APIUploadResp
      required:
        - id
        - status
        - name
        - created_at
        - type
      type: object
      properties:
        id:
          title: Id
          type: string
        status:
          $ref: '#/components/schemas/DocumentStatus'
        name:
          title: Name
          type: string
        created_at:
          title: Created At
          type: integer
        type:
          $ref: '#/components/schemas/UploadType'
    Body_Upload_Document_documents_upload_post:
      title: Body_Upload_Document_documents_upload_post
      required:
        - file
      type: object
      properties:
        package_type:
          title: Package Type
          anyOf:
            - $ref: '#/components/schemas/UploadPackageType'
            - type: string
          description: if provided, use this package(lite, basic, elite) to upload
          default: elite
        collection_id:
          title: Collection Id
          type: string
          description: if provided, add document to the collection, collection can be created by `POST /collections`
        file:
          title: File
          type: string
          format: binary
    ChatMessage:
      title: ChatMessage
      required:
        - role
        - content
      type: object
      properties:
        role:
          $ref: '#/components/schemas/ChatRoleEnum'
        content:
          title: Content
          type: string
    ChatRoleEnum:
      title: ChatRoleEnum
      enum:
        - assistant
        - user
      type: string
      description: An enumeration.
    CollectionReq:
      title: CollectionReq
      required:
        - name
      type: object
      properties:
        name:
          title: Name
          maxLength: 80
          minLength: 1
          type: string
    DocumentStatus:
      title: DocumentStatus
      enum:
        - 1
        - 7
        - 10
        - 12
        - 15
        - 20
        - 25
        - 30
        - 40
        - 50
        - 70
        - 120
        - 90
        - 210
        - 300
        - 0
        - -1
        - -2
        - -3
        - -4
        - -5
        - -6
        - -9
        - -10
        - -11
        - -12
        - -13
        - -14
        - -15
        - -16
        - -17
        - -18
        - -19
      type: integer
      description: An enumeration.
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    InteractionType:
      title: InteractionType
      enum:
        - select
        - doc
      type: string
      description: An enumeration.
    PDFViewerRect:
      title: PDFViewerRect
      required:
        - pageNumber
        - outline
      type: object
      properties:
        pageNumber:
          title: Pagenumber
          minimum: 1
          type: integer
        outline:
          title: Outline
          exclusiveMinimum: 0
          maxItems: 4
          minItems: 4
          type: array
          items:
            exclusiveMinimum: 0
            type: number
    PackageDataResp:
      title: PackageDataResp
      required:
        - max_count
        - used_count
      type: object
      properties:
        max_count:
          title: Max Count
          type: integer
          description: Max count of not expired package
        used_count:
          title: Used Count
          type: integer
          description: Used count of not expired package
    PackageQuotaResp:
      title: PackageQuotaResp
      type: object
      properties:
        package:
          $ref: '#/components/schemas/APIPackageInfoResp'
    QuestionReq:
      title: QuestionReq
      required:
        - upload_id
        - question
      type: object
      properties:
        upload_id:
          title: Upload Id
          maxLength: 36
          minLength: 36
          type: string
          description: document id or collection id, created by `POST /documents/upload` or `POST /collections` APIs accordingly.
        question:
          title: Question
          maxLength: 3000
          minLength: 1
          type: string
          description: question to ask
        stream:
          title: Stream
          type: boolean
          description: If set, partial message deltas will be sent, like in ChatGPT of [OpenAI](https://platform.openai.com/docs/api-reference/chat/create#stream). Tokens will be sent as data-only server-sent events as they become available.
          default: true
        selected_meta:
          title: Selected Meta
          allOf:
            - $ref: '#/components/schemas/SelectedMeta'
          description: When use [**Ask About Selected Text**](https://chatdoc.notion.site/4-Ways-to-Make-Queries-3d8d6d36060b4c7eb1d69e6a32405dd7), this field is acquired from [EVENT_TYPES.CHAT_ICON_CLICKED](/#section/ChatDOC-Document-Viewer/EVENT_TYPES) of our PDFViewerSDK, and then filled with the document `upload_id`, when ask upon a collection, it's the sub document id of collection.
        history:
          title: History
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
          description: "chat history, used for [Threaded Chat](https://chatdoc.notion.site/2-Ways-to-Dive-Deeper-1f2e3a8705e744a6872da0d39254f182), this parameter simulates [OpenAI' API](https://platform.openai.com/docs/guides/gpt/chat-completions-api). `history` is question and answer pairs, which is a list of `ChatMessage` objects. The max input tokens of `history`, `selected_meta.material` and `question` is 8000, which is a little less than OpenAI's limit of [Embedding models](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings). Sample parameter is as follows:\n\n        [\n            {\"role\": \"user\", \"content\": \"Who won\"},\n            {\"role\": \"assistant\", \"content\": \"The Los Angeles\"},\n            {\"role\": \"user\", \"content\": \"Where was it played?\"}\n            {\"role\": \"assistant\", \"content\": \"The 2020 World\"},\n        ]\n        "
          default: []
        search_entire_doc:
          title: Search Entire Doc
          type: boolean
          description: |2-
                    if true: limit responses to current file's information
                    else: responses go freely with knowledge of our AI
          default: true
        detailed_citation:
          title: Detailed Citation
          type: boolean
          description: Whether to show the source at the end of each sentence or not. Requires enabling the `search_entire_doc` setting.
          default: false
        language:
          title: Language
          type: string
          description: preferred language of answer to the question, if not provided, we will try to detect the language automatically, which is flexible and also works well. You'd better use [ISO language name](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes?useskin=vector), such as English, Chinese. But we can't promise, when AI can't answer your question well, it generally answers in English.
    QuestionReqWithUploadIds:
      title: QuestionReqWithUploadIds
      required:
        - question
        - upload_ids
      type: object
      properties:
        question:
          title: Question
          maxLength: 3000
          minLength: 1
          type: string
          description: question to ask
        stream:
          title: Stream
          type: boolean
          description: If set, partial message deltas will be sent, like in ChatGPT of [OpenAI](https://platform.openai.com/docs/api-reference/chat/create#stream). Tokens will be sent as data-only server-sent events as they become available.
          default: true
        selected_meta:
          title: Selected Meta
          allOf:
            - $ref: '#/components/schemas/SelectedMetaWithUploadId'
          description: When use [**Ask About Selected Text**](https://chatdoc.notion.site/4-Ways-to-Make-Queries-3d8d6d36060b4c7eb1d69e6a32405dd7), this field is acquired from [EVENT_TYPES.CHAT_ICON_CLICKED](/#section/ChatDOC-Document-Viewer/EVENT_TYPES) of our PDFViewerSDK.
        history:
          title: History
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
          description: "chat history, used for [Threaded Chat](https://chatdoc.notion.site/2-Ways-to-Dive-Deeper-1f2e3a8705e744a6872da0d39254f182), this parameter simulates [OpenAI' API](https://platform.openai.com/docs/guides/gpt/chat-completions-api). `history` is question and answer pairs, which is a list of `ChatMessage` objects. The max input tokens of `history`, `selected_meta.material` and `question` is 8000, which is a little less than OpenAI's limit of [Embedding models](https://platform.openai.com/docs/guides/embeddings/what-are-embeddings). Sample parameter is as follows:\n\n        [\n            {\"role\": \"user\", \"content\": \"Who won\"},\n            {\"role\": \"assistant\", \"content\": \"The Los Angeles\"},\n            {\"role\": \"user\", \"content\": \"Where was it played?\"}\n            {\"role\": \"assistant\", \"content\": \"The 2020 World\"},\n        ]\n        "
          default: []
        search_entire_doc:
          title: Search Entire Doc
          type: boolean
          description: |2-
                    if true: limit responses to current file's information
                    else: responses go freely with knowledge of our AI
          default: true
        detailed_citation:
          title: Detailed Citation
          type: boolean
          description: Whether to show the source at the end of each sentence or not. Requires enabling the `search_entire_doc` setting.
          default: false
        language:
          title: Language
          type: string
          description: preferred language of answer to the question, if not provided, we will try to detect the language automatically, which is flexible and also works well. You'd better use [ISO language name](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes?useskin=vector), such as English, Chinese. But we can't promise, when AI can't answer your question well, it generally answers in English.
        upload_ids:
          title: Upload Ids
          maxItems: 30
          minItems: 1
          type: array
          items:
            type: string
          description: Type must be a string list of upload ids
    QuestionResp:
      title: QuestionResp
      required:
        - question
        - answer
        - created_at
        - type
        - source_info
        - search_entire_doc
        - detailed_citation
        - id
      type: object
      properties:
        question:
          title: Question
          type: string
        answer:
          title: Answer
          type: string
        created_at:
          title: Created At
          type: integer
        type:
          $ref: '#/components/schemas/InteractionType'
        source_info:
          title: Source Info
          type: array
          items: {}
        search_entire_doc:
          title: Search Entire Doc
          type: boolean
        detailed_citation:
          title: Detailed Citation
          type: boolean
        id:
          title: Id
          type: integer
    SelectedMeta:
      title: SelectedMeta
      required:
        - material
        - upload_id
        - rects
      type: object
      properties:
        material:
          title: Material
          type: string
        upload_id:
          title: Upload Id
          maxLength: 36
          minLength: 36
          type: string
        rects:
          title: Rects
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/PDFViewerRect'
    SelectedMetaWithUploadId:
      title: SelectedMetaWithUploadId
      required:
        - material
        - upload_id
        - rects
      type: object
      properties:
        material:
          title: Material
          type: string
        upload_id:
          title: Upload Id
          type: string
        rects:
          title: Rects
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/PDFViewerRect'
    UploadPackageType:
      title: UploadPackageType
      enum:
        - elite
        - lite
        - basic
      type: string
      description: An enumeration.
    UploadType:
      title: UploadType
      enum:
        - collection
        - single_doc
        - doc_of_collection
      type: string
      description: An enumeration.
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
  securitySchemes:
    HTTPBearer:
      type: http
      scheme: bearer
